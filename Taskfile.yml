version: '3'

dotenv: ['.taskenv', '.secret/.env', '{{.HOME}}/.env' ]
vars:
  LOCAL_BIN: bin
  CONTROLLER_TOOLS_VERSION: v0.18.0
  ENVTEST_K8S_VERSION: "1.30.x"
  ENVTEST_VERSION: release-0.17
  CRD_DIRECTORY: config/crd/bases
  KCP_APIGEN_VERSION: v0.27.1
  KCP_VERSION: 0.27.1
  GOMPLATE_VERSION: v4.3.0
  GOARCH:
    sh: go env GOARCH
  GOOS:
    sh: go env GOOS
  SEDCMD:
    sh: |
      if [ "$(go env GOOS)" = "darwin" ]; then
        echo "sed -i ''"
      else
        echo "sed -i"
      fi
tasks:
  echosed:
    cmds:
      - echo "{{.SEDCMD}}"
  ## Setup
  setup:mockery:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/mockery || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vektra/mockery/v2@v2.53.3
  setup:controller-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/controller-gen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}
  setup:envtest:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/setup-envtest|| GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}}
  setup:golangci-lint:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/golangci-lint || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6
  setup:go-test-coverage:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/go-test-coverage || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vladopajic/go-test-coverage/v2@latest
  setup:kcp:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/kcp || GOBIN=$(pwd)/{{.LOCAL_BIN}} ./hack/download-tool.sh https://github.com/kcp-dev/kcp/releases/download/v{{ .KCP_VERSION }}/kcp_{{ .KCP_VERSION }}_{{ .GOOS }}_{{ .GOARCH }}.tar.gz kcp {{.KCP_VERSION}}
  setup:kcp-api-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/apigen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/kcp-dev/kcp/sdk/cmd/apigen@{{.KCP_APIGEN_VERSION}}

  ## Development
  mockery:
    deps: [setup:mockery]
    cmds:
      - "{{.LOCAL_BIN}}/mockery"
  manifests:
    deps: [setup:controller-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen rbac:roleName=manager-role crd paths=./... output:crd:artifacts:config={{.CRD_DIRECTORY}}"
  generate:
    deps: [setup:controller-gen, setup:kcp-api-gen]
    cmds:
      - task: manifests
      - "{{.LOCAL_BIN}}/controller-gen object:headerFile=hack/boilerplate.go.txt paths=./..."
      - task: schemagen
      - "{{.LOCAL_BIN}}/apigen --input-dir {{.CRD_DIRECTORY}} --output-dir ./config/resources"
      - "{{.LOCAL_BIN}}/apigen --input-dir {{.CRD_DIRECTORY}} --output-dir ./test/setup"
      - task: copynamespacedcrd
  build:
    cmds:
      - go build ./...
  docker-build:
    cmds:
      - docker build .
  ## Testing
  fmt:
    cmds:
      - go fmt ./...
  lint:
    deps: [setup:golangci-lint]
    cmds:
      - task: fmt
      - "{{.LOCAL_BIN}}/golangci-lint run --timeout 15m ./..."
  envtest:
    env:
      KUBEBUILDER_ASSETS:
        sh: $(pwd)/{{.LOCAL_BIN}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir $(pwd)/{{.LOCAL_BIN}} -p path
      GO111MODULE: on
    cmds:
      - go test ./... {{.ADDITIONAL_COMMAND_ARGS}}
  test:
    deps: [mockery, setup:envtest, setup:kcp, setup:controller-gen]
    cmds:
      - task: envtest
  cover:
    deps: [setup:envtest, test, setup:go-test-coverage]
    cmds:
      - task: envtest
        vars:
          ADDITIONAL_COMMAND_ARGS: -coverprofile=./cover.out -covermode=atomic
      - "{{.LOCAL_BIN}}/go-test-coverage --threshold-file 80 --threshold-package 80 --threshold-total 95 --profile cover.out --config ./.testcoverage.yml"
  helm-unittest:
    cmds:
      - helm unittest chart
  validate:
    cmds:
      - task: lint
      - task: test
      - task: cover
  schemagen:
    cmds:
      - go generate ./...
  run:
    cmds:
      - go run ./main.go operator
  copynamespacedcrd:
    cmd: |
         cp -rf config/crd/bases/* config/out/
         yq -i '.spec.scope = "Namespaced"' ./config/out/core.openmfp.io_contentconfigurations.yaml
         {{.SEDCMD}} '1s;^;\{\{ if not .Values.kcp.enabled \}\}\n;' ./config/out/core.openmfp.io_contentconfigurations.yaml
         echo "{{ `{{- end }}` }}" >> ./config/out/core.openmfp.io_contentconfigurations.yaml
  copytocharts:
    cmds:
      - cp -rf config/out/* ../helm-charts/charts/extension-manager-operator-crds/templates



